name: Build and push Apache sidecar container

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/build_push_apache_container.yml"
      - "wordpress/docker/apache/**"

env:
  DOCKER_BUILDKIT: 1
  REPO_NAME: platform/apache
  STAGING_ECR_REGISTRY: 729164266357.dkr.ecr.ca-central-1.amazonaws.com
  PRODUCTION_ECR_REGISTRY: 472286471787.dkr.ecr.ca-central-1.amazonaws.com

jobs:
  build-push-staging-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: Docker image tag
        run: |
          VERSION=$(cat wordpress/docker/apache/VERSION | xargs)
          echo "IMAGE_TAG=v$VERSION" >> $GITHUB_ENV

      - name: Build container
        run: |
          docker build \
          --build-arg git_sha="$GITHUB_SHA" \
          --build-arg APACHE_KEY="${{ secrets.STAGING_WORDPRESS_APACHE_KEY }}" \
          --build-arg APACHE_CERT="${{ secrets.STAGING_WORDPRESS_APACHE_CERT }}" \
          -t "${{ env.STAGING_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./wordpress/docker/apache/Dockerfile .

      - name: Push containers to ECR
        run: |
          docker push ${{ env.STAGING_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Logout of ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

  build-push-production-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: Docker image tag
        run: |
          VERSION=$(cat wordpress/docker/apache/VERSION | xargs)
          echo "IMAGE_TAG=v$VERSION" >> $GITHUB_ENV

      - name: Build container
        run: |
          docker build \
          --build-arg git_sha="$GITHUB_SHA" \
          --build-arg APACHE_KEY="${{ secrets.PRODUCTION_WORDPRESS_APACHE_KEY }}" \
          --build-arg APACHE_CERT="${{ secrets.PRODUCTION_WORDPRESS_APACHE_CERT }}" \
          -t "${{ env.PRODUCTION_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./wordpress/docker/apache/Dockerfile .

      - name: Push containers to ECR
        run: |
          docker push ${{ env.PRODUCTION_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@cfec0943e40dbb78cee115bbbe89dc17f07b7a0f # v2.1.3
        with:
          docker_image: "${{ env.PRODUCTION_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}"
          dockerfile_path: "wordpress/docker/apache/Dockerfile"
          sbom_name: "apache"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
