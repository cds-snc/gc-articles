name: Build and push container

on:
  push:
    branches:
      - main
    paths:
      - ".dockerignore"
      - ".github/workflows/build_push_container.yml"
      - "wordpress/**"
  release:
    types:
      - created

env:
  DOCKER_BUILDKIT: 1
  REPO_NAME: platform/wordpress
  STAGING_ECR_REGISTRY: 729164266357.dkr.ecr.ca-central-1.amazonaws.com

jobs:
  build-push-container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker image tag
        run: |
          if [[ $GITHUB_EVENT_NAME == "release" ]]; then
            echo "IMAGE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=sha-${GITHUB_SHA}" >> $GITHUB_ENV
          fi

      - name: Add Composer auth credentials
        run: |
          cd wordpress
          composer config github-oauth.github.com ${{ secrets.COMPOSER_GITHUB_TOKEN }}
          composer config http-basic.my.yoast.com token ${{ secrets.COMPOSER_YOAST_TOKEN }}

      - name: Build container
        run: |
          docker build \
          --build-arg git_sha="$GITHUB_SHA" \
          --build-arg WPML_USER_ID="${{ secrets.WPML_USER_ID }}" \
          --build-arg WPML_KEY="${{ secrets.WPML_KEY }}" \
          -t "${{ env.STAGING_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}" \
          -f ./wordpress/docker/production.Dockerfile .

      - name: Push containers to ECR
        run: |
          docker push ${{ env.STAGING_ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Logout of ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Run scan websites # Static scans
        run: |
          curl -s https://scan-websites.alpha.canada.ca > /dev/null
          sleep 60
          curl -X GET -H 'X-API-KEY: ${{ secrets.SCAN_WEBSITES_KEY }}' -H 'X-TEMPLATE-TOKEN: ${{ secrets.SCAN_WEBSITES_TEMPLATE }}' https://scan-websites.alpha.canada.ca/scans/start
