name: "Terragrunt apply PRODUCTION"

on:
  push:
    branches:
      - main
    paths:
      - "infrastructure/VERSION"

env:
  AWS_REGION: ca-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
  CONFTEST_VERSION: 0.27.0
  TERRAFORM_VERSION: 1.0.10
  TERRAGRUNT_VERSION: 0.35.6
  TF_INPUT: false
  TF_VAR_database_name: ${{ secrets.PRODUCTION_DATABASE_NAME }}
  TF_VAR_database_username: ${{ secrets.PRODUCTION_DATABASE_USERNAME }}
  TF_VAR_database_password: ${{ secrets.PRODUCTION_DATABASE_PASSWORD }}
  TF_VAR_cloudfront_custom_header_name: ${{ secrets.PRODUCTION_CLOUDFRONT_CUSTOM_HEADER_NAME }}
  TF_VAR_cloudfront_custom_header_value: ${{ secrets.PRODUCTION_CLOUDFRONT_CUSTOM_HEADER_VALUE }}
  TF_VAR_list_manager_endpoint: ${{ secrets.PRODUCTION_LIST_MANAGER_ENDPOINT }}
  TF_VAR_default_list_manager_api_key: ${{ secrets.PRODUCTION_DEFAULT_LIST_MANAGER_API_KEY }}
  TF_VAR_default_notify_api_key: ${{ secrets.PRODUCTION_DEFAULT_NOTIFY_API_KEY }}
  TF_VAR_encryption_key: ${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
  TF_VAR_s3_uploads_bucket: ${{ secrets.PRODUCTION_S3_UPLOADS_BUCKET }}
  TF_VAR_s3_uploads_key: ${{ secrets.PRODUCTION_S3_UPLOADS_KEY }}
  TF_VAR_s3_uploads_secret: ${{ secrets.PRODUCTION_S3_UPLOADS_SECRET }}
  TF_VAR_c3_aws_access_key_id: ${{ secrets.PRODUCTION_C3_AWS_ACCESS_KEY_ID }}
  TF_VAR_c3_aws_secret_access_key: ${{ secrets.PRODUCTION_C3_AWS_SECRET_ACCESS_KEY }}
  TF_VAR_slack_webhook_url: ${{ secrets.PRODUCTION_SLACK_WEBHOOK_URL }}
  TF_VAR_wordpress_auth_key: ${{ secrets.PRODUCTION_WORDPRESS_AUTH_KEY }}
  TF_VAR_wordpress_secure_auth_key: ${{ secrets.PRODUCTION_WORDPRESS_SECURE_AUTH_KEY }}
  TF_VAR_wordpress_logged_in_key: ${{ secrets.PRODUCTION_WORDPRESS_LOGGED_IN_KEY }}
  TF_VAR_wordpress_nonce_key: ${{ secrets.PRODUCTION_WORDPRESS_NONCE_KEY }}
  TF_VAR_wordpress_auth_salt: ${{ secrets.PRODUCTION_WORDPRESS_AUTH_SALT }}
  TF_VAR_wordpress_secure_auth_salt: ${{ secrets.PRODUCTION_WORDPRESS_SECURE_AUTH_SALT }}
  TF_VAR_wordpress_logged_in_salt: ${{ secrets.PRODUCTION_WORDPRESS_LOGGED_IN_SALT }}
  TF_VAR_wordpress_nonce_salt: ${{ secrets.PRODUCTION_WORDPRESS_NONCE_SALT }}

jobs:
  # Check the VERSION file to get the target version to deploy and previously deployed version.
  # These are used to determine which Terraform modules need to have `terraform plan` run.
  version-manifest:
    uses: cds-snc/gc-articles/.github/workflows/version-manifest.yml@main

  terragrunt-apply:
    needs: version-manifest
    runs-on: ubuntu-latest
    env:
      TARGET_VERSION: ${{ needs.version-manifest.outputs.current }}
      PREVIOUS_VERSION: ${{ needs.version-manifest.outputs.previous }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.TARGET_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/*
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - uses: cds-snc/paths-filter@v2.10.3
        id: filter
        with:
          ref: ${{ env.TARGET_VERSION }}
          base: ${{ env.PREVIOUS_VERSION }}
          filters: |
            common:
              - '.github/workflows/terragrunt-apply-production.yml'
              - 'infrastructure/terragrunt/env/common/**'
              - 'infrastructure/terragrunt/env/terragrunt.hcl'
              - 'infrastructure/terragrunt/env/prod/env_vars.hcl'
            alarms:
              - 'infrastructure/terragrunt/aws/alarms/**'
              - 'infrastructure/terragrunt/env/prod/alarms/**'
            database:
              - 'infrastructure/terragrunt/aws/database/**'
              - 'infrastructure/terragrunt/env/prod/database/**'
            ecr:
              - 'infrastructure/terragrunt/aws/ecr/**'
              - 'infrastructure/terragrunt/env/prod/ecr/**'
            ecs:
              - 'infrastructure/terragrunt/aws/ecs/**'
              - 'infrastructure/terragrunt/env/prod/ecs/**'
            hosted-zone:
              - 'infrastructure/terragrunt/aws/hosted-zone/**'
              - 'infrastructure/terragrunt/env/prod/hosted-zone/**'
            load-balancer:
              - 'infrastructure/terragrunt/aws/load-balancer/**'
              - 'infrastructure/terragrunt/env/prod/load-balancer/**'
            network:
              - 'infrastructure/terragrunt/aws/network/**'
              - 'infrastructure/terragrunt/env/prod/network/**'
            storage:
              - 'infrastructure/terragrunt/aws/storage/**'
              - 'infrastructure/terragrunt/env/prod/storage/**'

      # No dependencies
      - name: Terragrunt apply network
        if: ${{ steps.filter.outputs.network == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/network
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply hosted-zone
        if: ${{ steps.filter.outputs.hosted-zone == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/hosted-zone
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply ecr
        if: ${{ steps.filter.outputs.ecr == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/ecr
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply storage
        if: ${{ steps.filter.outputs.storage == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/storage
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Network dependency
      - name: Terragrunt apply database
        if: ${{ steps.filter.outputs.database == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/database
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply load-balancer
        if: ${{ steps.filter.outputs.load-balancer == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/load-balancer
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Load-balancer & database dependency
      - name: Terragrunt apply ecs
        if: ${{ steps.filter.outputs.ecs == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/ecs
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on everything
      - name: Terragrunt apply alarms
        if: ${{ steps.filter.outputs.alarms == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: infrastructure/terragrunt/env/prod/alarms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve