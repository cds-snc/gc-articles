#!/usr/bin/env bash

if ! [ -x "$(command -v docker-compose)" ]; then
    shopt -s expand_aliases
    alias docker-compose='docker compose'
fi

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Articles supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file so our environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"wordpress"}
export CLI_SERVICE="cli"
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

export SAIL_SHARE_DASHBOARD=${SAIL_SHARE_DASHBOARD:-4040}
export SAIL_SHARE_SERVER_HOST=${SAIL_SHARE_SERVER_HOST:-"laravel-sail.site"}
export SAIL_SHARE_SERVER_PORT=${SAIL_SHARE_SERVER_PORT:-8080}
export SAIL_SHARE_SUBDOMAIN=${SAIL_SHARE_SUBDOMAIN:-""}

# Function that outputs Sail is not running...
function sail_is_not_running {
    echo -e "${WHITE}Sail is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may Sail using the following commands:${NC} './vendor/bin/sail up' or './vendor/bin/sail up -d'" >&2

    exit 1
}

if [ -z "$SAIL_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Sail is currently up...
    PSRESULT="$(docker-compose ps -q)"
    if docker-compose ps | grep $APP_SERVICE | grep 'Exit'; then
        echo -e "${WHITE}Shutting down old Sail processes...${NC}" >&2

        docker-compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi
else
    EXEC="yes"
fi

if [ $# -gt 0 ]; then
    # Proxy Composer commands to the "composer" binary on the application container...
    if [ "$1" == "init" ]; then

        docker-compose run \
            "$CLI_SERVICE" \
            bash -c "composer update"

    elif [ "$1" == "generate-encryption-key" ]; then

      docker-compose run "$CLI_SERVICE" bash -c "composer generate-encryption-key"

    elif [ "$1" == "install" ] || [ "$1" == "update" ]; then

      docker-compose run \
          "$CLI_SERVICE" \
          bash -c "composer config -g http-basic.my.yoast.com token ${COMPOSER_YOAST_TOKEN} && cd wordpress && composer $@"

    elif [ "$1" == "wordpress" ]; then
        shift 1

        if [ "$1" == "install" ]; then
          docker-compose run install
        else
          echo "error"
        fi
    # Proxy the "test" command to the "php artisan test" Artisan command...
    elif [ "$1" == "test" ]; then
        shift 1

        docker-compose run \
            "$CLI_SERVICE" \
            bash -c "cd wordpress && ./vendor/bin/pest"

    # Proxy Node commands to the "node" binary on the application container...
    elif [ "$1" == "node" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u sail \
                "$CLI_SERVICE" \
                node "$@"
        else
            sail_is_not_running
        fi

    # Proxy NPM commands to the "npm" binary on the application container...
    elif [ "$1" == "npm" ]; then
        shift 1

        docker-compose run \
            "$CLI_SERVICE" \
            npm "$@"

    # Proxy NPX commands to the "npx" binary on the application container...
    elif [ "$1" == "npx" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u sail \
                "$CLI_SERVICE" \
                npx "$@"
        else
            sail_is_not_running
        fi

    # Initiate a Bash shell within the application container...
    elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                -u sail \
                "$CLI_SERVICE" \
                bash "$@"
        else
            sail_is_not_running
        fi

    # Initiate a root user Bash shell within the application container...
    elif [ "$1" == "root-shell" ] ; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker-compose exec \
                "$CLI_SERVICE" \
                bash "$@"
        else
            sail_is_not_running
        fi

    elif [ "$1" == "db-cleanup" ]; then
      shift 1

      if [ "$1" == "delete" ]; then
          docker exec -i \
              "$CLI_SERVICE" \
              bash < ./cli/bin/db-cleanup-delete.sh
      else
        docker exec -i \
          "$CLI_SERVICE" \
          bash < ./cli/bin/db-cleanup-list.sh
      fi

    # Pass unknown commands to the "docker-compose" binary...
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi